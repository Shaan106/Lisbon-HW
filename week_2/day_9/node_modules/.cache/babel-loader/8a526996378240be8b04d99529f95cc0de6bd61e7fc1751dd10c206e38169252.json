{"ast":null,"code":"var _jsxFileName = \"/Users/shaanyadav/Desktop/Lisbon/Lisbon-HW/week_2/day_7/task-list/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\n// If you export default then you don't need the {} brackets\nimport { Task } from './models/Task';\nimport TaskInput from './components/TaskInput';\nimport TaskTable from './components/TaskTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // useEffect is a React Hook\n  useEffect(() => {\n    if (!tasks.length) {\n      loadTasksFromLocalStorage();\n    }\n\n    // In the case of an empty array, the function only\n    // fires the first time the component initializes\n\n    // If we put a variable in the [], anytime that variable changes\n    // the function fires\n  }, []);\n  useEffect(() => {\n    saveTasksToLocalStorage();\n  }, [tasks]);\n  function onTaskCreate(name) {\n    // create the task\n    // unique id\n    const id = new Date().getTime();\n    // new task instance\n    const task = new Task(id, name, false);\n\n    // add thee task to the state tasks\n    setTasks([...tasks, task]);\n  }\n  function onTaskRemove(taskId) {\n    // update the tasks state with the filtered tasks\n    setTasks(tasks.filter(task => task.id !== taskId));\n  }\n  function onTaskCompleteToggle(taskId) {\n    // toggle the task complete state\n    const taskToToggle = tasks.find(task => task.id === taskId);\n    taskToToggle.complete = !taskToToggle.complete;\n\n    // update the tasks state with the new task\n    setTasks(tasks.map(task => {\n      return task.id == taskId ? taskToToggle : task;\n    }));\n  }\n  function saveTasksToLocalStorage() {\n    const json = JSON.stringify(tasks);\n    localStorage.setItem('tasks', json);\n  }\n  function loadTasksFromLocalStorage() {\n    const json = localStorage.getItem('tasks');\n    if (json) {\n      const taskArr = JSON.parse(json);\n      if (taskArr.length) {\n        setTasks(taskArr.map(x => Task.fromJson(x)));\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-body text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Our Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n        onTaskCreate: onTaskCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskTable, {\n        tasks: tasks,\n        onTaskRemove: onTaskRemove,\n        onTaskCompleteToggle: onTaskCompleteToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"weOf0VesAdD4xw+rXOOhYK4d8/M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Task","TaskInput","TaskTable","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","length","loadTasksFromLocalStorage","saveTasksToLocalStorage","onTaskCreate","name","id","Date","getTime","task","onTaskRemove","taskId","filter","onTaskCompleteToggle","taskToToggle","find","complete","map","json","JSON","stringify","localStorage","setItem","getItem","taskArr","parse","x","fromJson","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shaanyadav/Desktop/Lisbon/Lisbon-HW/week_2/day_7/task-list/src/App.js"],"sourcesContent":["import './App.css';\n\nimport { useState, useEffect } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\n// If you export default then you don't need the {} brackets\nimport { Task } from './models/Task';\nimport TaskInput from './components/TaskInput';\nimport TaskTable from './components/TaskTable';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  // useEffect is a React Hook\n  useEffect(() => {\n    if (!tasks.length) {\n      loadTasksFromLocalStorage();\n    }\n\n    // In the case of an empty array, the function only\n    // fires the first time the component initializes\n\n    // If we put a variable in the [], anytime that variable changes\n    // the function fires\n  }, []);\n\n  useEffect(() => {\n    saveTasksToLocalStorage();\n  }, [tasks]);\n\n  function onTaskCreate(name) {\n    // create the task\n    // unique id\n    const id = new Date().getTime();\n    // new task instance\n    const task = new Task(id, name, false);\n\n    // add thee task to the state tasks\n    setTasks([...tasks, task]);\n  }\n\n  function onTaskRemove(taskId) {\n    // update the tasks state with the filtered tasks\n    setTasks(tasks.filter((task) => task.id !== taskId));\n  }\n\n  function onTaskCompleteToggle(taskId) {\n    // toggle the task complete state\n    const taskToToggle = tasks.find((task) => task.id === taskId);\n    taskToToggle.complete = !taskToToggle.complete;\n\n    // update the tasks state with the new task\n    setTasks(\n      tasks.map((task) => {\n        return task.id == taskId ? taskToToggle : task;\n      })\n    );\n  }\n\n  function saveTasksToLocalStorage() {\n    const json = JSON.stringify(tasks);\n    localStorage.setItem('tasks', json);\n  }\n\n  function loadTasksFromLocalStorage() {\n    const json = localStorage.getItem('tasks');\n    if (json) {\n      const taskArr = JSON.parse(json);\n      if (taskArr.length) {\n        setTasks(taskArr.map((x) => Task.fromJson(x)));\n      }\n    }\n  }\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"card card-body text-center\">\n        <h1>Task List</h1>\n        <hr />\n        <p>Our Task List</p>\n\n        <TaskInput onTaskCreate={onTaskCreate} />\n        <TaskTable\n          tasks={tasks}\n          onTaskRemove={onTaskRemove}\n          onTaskCompleteToggle={onTaskCompleteToggle}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}